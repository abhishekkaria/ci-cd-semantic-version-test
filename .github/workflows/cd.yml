name: PR Versioning & Tagging

on:
  pull_request:
    types: [closed]
    branches:
      - dev
      - qa
      - main

permissions:
  contents: write  # needed to push tags

jobs:
  versioning:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch all tags

      - name: Determine branch pre-release type
        id: prerelease
        run: |
          base_branch="${{ github.base_ref }}"
          if [ "$base_branch" = "dev" ]; then
            pre="alpha"
          elif [ "$base_branch" = "qa" ]; then
            pre="beta"
          else
            pre=""
          fi
          echo "pre=$pre" >> $GITHUB_OUTPUT

      - name: Get latest tag for this branch type
        id: get_version
        run: |
          base_branch="${{ github.base_ref }}"
          pre="${{ steps.prerelease.outputs.pre }}"

          if [ "$base_branch" = "qa" ]; then
              latest=$(git tag --list "*-alpha.*" | sort -V | tail -n1)
              if [ -z "$latest" ]; then
                  latest="0.0.0"
              fi
          elif [ "$base_branch" = "dev" ]; then
              latest=$(git tag --list "*-alpha.*" | sort -V | tail -n1 || echo "0.0.0")
          else
              latest=$(git tag --list "[0-9]*.[0-9]*.[0-9]*" | grep -v -E "-(alpha|beta|rc)\." | sort -V | tail -n1)
              if [ -z "$latest" ]; then
                  latest="0.0.0"
              fi
          fi

          echo "latest=$latest" >> $GITHUB_OUTPUT
          echo "ℹ️ Latest tag: $latest"

      - name: Determine bump type from PR title
        id: bump_type
        run: |
          title="${{ github.event.pull_request.title }}"
          echo "PR Title: $title"

          if [[ "$title" =~ [Mm]ajor ]]; then
            bump="major"
          elif [[ "$title" =~ [Mm]inor ]]; then
            bump="minor"
          elif [[ "$title" =~ [Pp]atch ]]; then
            bump="patch"
          elif [[ "$title" =~ [Pp]rod ]]; then
            bump="patch"
          else
            echo "❌ PR title must include major/minor/patch/prod"
            exit 1
          fi
          echo "bump=$bump" >> $GITHUB_OUTPUT
          echo "ℹ️ Bump type: $bump"

      - name: Bump version
        id: bump_version
        run: |
          latest="${{ steps.get_version.outputs.latest }}"
          bump="${{ steps.bump_type.outputs.bump }}"
          pre="${{ steps.prerelease.outputs.pre }}"
          base_branch="${{ github.base_ref }}"

          # Strip prerelease suffix
          core_version=$(echo "$latest" | cut -d'-' -f1)

          # Split into major/minor/patch safely
          IFS='.' read -r major minor patch <<< "$core_version"
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}

          # Special case: main branch promotion from prerelease → stable
          if [ "$base_branch" = "main" ] && [[ "$latest" == *-* ]]; then
            new_version="$core_version"
            echo "Promoting prerelease $latest → stable $new_version"
          else
            # Apply bump
            if [ "$bump" = "major" ]; then
              major=$((major+1)); minor=0; patch=0
            elif [ "$bump" = "minor" ]; then
              minor=$((minor+1)); patch=0
            elif [ "$bump" = "patch" ]; then
              patch=$((patch+1))
            fi

            new_version="$major.$minor.$patch"

            # Handle prerelease numbering
            if [ -n "$pre" ]; then
              count=$(git tag --list "${new_version}-${pre}.*" | wc -l)
              count=$((count+1))
              new_version="${new_version}-${pre}.${count}"
            fi
          fi

          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "✅ New version: $new_version"

      - name: Create Git Tag
        run: |
          new_version="${{ steps.bump_version.outputs.new_version }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "$new_version" -m "Release $new_version"
          git push origin "$new_version"
